====================LustreNode类信息==========================
NodeName: : [Counter]
NodeInput: : [init : int; ]
NodeOutput: [count : int; ]
NodeVars: []
NodeBodys: [count = init -> count + 1;; ]
NodeStates:
From [count] to [init -> count + 1]
====================VarStateList类信息==========================

[count]'s state:
1.VarName is: [count], VarType is: [int]
2.[count]'s Statements:
{init -> count + 1}

[init]'s state:
1.VarName is: [init], VarType is: [int]
2.[init]'s Statements:
====================CreateSolver类信息==========================
K-induction : count = init -> count + 1
Base case holds!
Step case holds!
Loop invariant verified successfully.
Satisfiable
Model:
(define-fun count () Int
  1)
(define-fun |1| () Int
  0)
(define-fun k_prime () Int
  3)
(define-fun init () Int
  0)
(define-fun k () Int
  2)
